//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Unitytools/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Player_Map"",
            ""id"": ""09d1af84-baa3-430d-a14a-4203bf34998e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""a76e42b6-5983-42da-a496-cf0bf03df4d6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveF"",
                    ""type"": ""Button"",
                    ""id"": ""33bc59c0-337f-49b5-a399-b47fb1888521"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveB"",
                    ""type"": ""Button"",
                    ""id"": ""90ebfd83-3b78-4e65-827f-c60893f1db5e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnR"",
                    ""type"": ""Button"",
                    ""id"": ""20623167-4500-4f01-9c4a-4e891c2fab51"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnL"",
                    ""type"": ""Button"",
                    ""id"": ""e4e89dd5-5362-4a70-8a87-4dbeed259eba"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""346021bb-b1cb-4944-b3c5-56e9aeee929e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""476e596e-2de6-4859-b089-f589a84122e6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7a1ddfa3-8594-4d2c-a92a-9dc7e10ba6e8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""eb2be4e5-9b0b-4233-acc8-b20a705f9812"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""38c8b26f-cd18-475a-b17c-975fc53fcece"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9e88f651-bc3d-4143-8a36-a5aa55ac730b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0cb62c10-642a-4e7c-8a32-eb60fe82dc6b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""72d8a1e2-49fd-462e-9781-c0eee52f5f30"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""11662125-6c2a-467f-b2ee-7e7f9236f106"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""89d11ab2-c765-4d2c-b506-e662ef2480db"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4fe09f18-7e76-4af2-967d-0f709c1b0dbb"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveF"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11aaeeee-07f3-4921-a823-4cca431815e7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32b5014b-e74e-437b-ae12-851f0dc843ba"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d7e5536-7671-4b09-b53a-55395d67c19f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurnL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Map
        m_Player_Map = asset.FindActionMap("Player_Map", throwIfNotFound: true);
        m_Player_Map_Movement = m_Player_Map.FindAction("Movement", throwIfNotFound: true);
        m_Player_Map_MoveF = m_Player_Map.FindAction("MoveF", throwIfNotFound: true);
        m_Player_Map_MoveB = m_Player_Map.FindAction("MoveB", throwIfNotFound: true);
        m_Player_Map_TurnR = m_Player_Map.FindAction("TurnR", throwIfNotFound: true);
        m_Player_Map_TurnL = m_Player_Map.FindAction("TurnL", throwIfNotFound: true);
    }

    ~@PlayerInputs()
    {
        UnityEngine.Debug.Assert(!m_Player_Map.enabled, "This will cause a leak and performance issues, PlayerInputs.Player_Map.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Map
    private readonly InputActionMap m_Player_Map;
    private List<IPlayer_MapActions> m_Player_MapActionsCallbackInterfaces = new List<IPlayer_MapActions>();
    private readonly InputAction m_Player_Map_Movement;
    private readonly InputAction m_Player_Map_MoveF;
    private readonly InputAction m_Player_Map_MoveB;
    private readonly InputAction m_Player_Map_TurnR;
    private readonly InputAction m_Player_Map_TurnL;
    public struct Player_MapActions
    {
        private @PlayerInputs m_Wrapper;
        public Player_MapActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Map_Movement;
        public InputAction @MoveF => m_Wrapper.m_Player_Map_MoveF;
        public InputAction @MoveB => m_Wrapper.m_Player_Map_MoveB;
        public InputAction @TurnR => m_Wrapper.m_Player_Map_TurnR;
        public InputAction @TurnL => m_Wrapper.m_Player_Map_TurnL;
        public InputActionMap Get() { return m_Wrapper.m_Player_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_MapActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_MapActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_MapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_MapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @MoveF.started += instance.OnMoveF;
            @MoveF.performed += instance.OnMoveF;
            @MoveF.canceled += instance.OnMoveF;
            @MoveB.started += instance.OnMoveB;
            @MoveB.performed += instance.OnMoveB;
            @MoveB.canceled += instance.OnMoveB;
            @TurnR.started += instance.OnTurnR;
            @TurnR.performed += instance.OnTurnR;
            @TurnR.canceled += instance.OnTurnR;
            @TurnL.started += instance.OnTurnL;
            @TurnL.performed += instance.OnTurnL;
            @TurnL.canceled += instance.OnTurnL;
        }

        private void UnregisterCallbacks(IPlayer_MapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @MoveF.started -= instance.OnMoveF;
            @MoveF.performed -= instance.OnMoveF;
            @MoveF.canceled -= instance.OnMoveF;
            @MoveB.started -= instance.OnMoveB;
            @MoveB.performed -= instance.OnMoveB;
            @MoveB.canceled -= instance.OnMoveB;
            @TurnR.started -= instance.OnTurnR;
            @TurnR.performed -= instance.OnTurnR;
            @TurnR.canceled -= instance.OnTurnR;
            @TurnL.started -= instance.OnTurnL;
            @TurnL.performed -= instance.OnTurnL;
            @TurnL.canceled -= instance.OnTurnL;
        }

        public void RemoveCallbacks(IPlayer_MapActions instance)
        {
            if (m_Wrapper.m_Player_MapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_MapActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_MapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_MapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_MapActions @Player_Map => new Player_MapActions(this);
    public interface IPlayer_MapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnMoveF(InputAction.CallbackContext context);
        void OnMoveB(InputAction.CallbackContext context);
        void OnTurnR(InputAction.CallbackContext context);
        void OnTurnL(InputAction.CallbackContext context);
    }
}
